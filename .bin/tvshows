#!/bin/sh

LOG="$HOME/.log/tvshows.log"
CACHE="$HOME/.cache/tvshows"
EXTENSIONS='\.(mkv|avi|divx|xvid|mov|wmv|mp4|mpg|mpeg|vob|iso|m4v|ts)'
DEBUGTVSHOWS=10

mkdir -p "$HOME/.log"
echo -e "*** $(date) Start ***\n" >> "$LOG"

function end {
	echo -e "\n*** $(date) End ***\n" >> "$LOG"
}
trap end EXIT

function log {
	local messages="$@"
	echo "$messages" | tee -a "$LOG"
}

function show {
	local title="$1" messages="${@:2}"
	echo -e "\e[35m$title\e[39m" "$messages" | tee -a "$LOG"
}

function throw {
	local message="$1"
	echo -e "\e[31m$message\e[39m" | tee -a "$LOG" >&2
	exit 1
}

# Load & check tv shows configuration
[[ -f "$HOME/.tvshows" ]] || cp "$HOME/media/.tvshows.template" "$HOME/.tvshows"
. "$HOME/.tvshows"
if [[ -z "$SERVER" ]] || [[ -z "$SOURCE" ]] || [[ -z "$DESTINATION" ]] || [[ -z "$TVSHOWS" ]]; then
	throw '~/.tvshows is not properly configured: rsync.'
fi
ssh -o PasswordAuthentication=no "$SERVER" "true"
[[ $? -ne 0 ]] && throw 'SERVER defined in ~/.tvshows requires a password.'
ssh "$SERVER" "[[ ! -d \"$SOURCE\" ]]" && throw 'SOURCE defined in ~/.tvshows does not exist.'
[[ ! -d "$DESTINATION" ]] && throw 'DESTINATION defined in ~/.tvshows does not exist.'
if [[ -z "$MEDUSA_HOST" ]] || [[ -z "$MEDUSA_PORT" ]] || [[ -z "$MEDUSA_TOKEN" ]] || [[ -z "$MEDUSA_DOWNLOADS" ]]; then
	throw '~/.tvshows is not properly configured: medusa.'
fi

# Display latest available tv shows
if [[ $DEBUGTVSHOWS -gt 0 ]]; then
	show 'Latest available tv shows:'
	ssh "$SERVER" "find \"$SOURCE\" -type f -printf '%T+ %P\\n' | sort -n | egrep -i \"^[^ ]+ ($TVSHOWS)/.+$EXTENSIONS$\" | tail -$DEBUGTVSHOWS" 2>&1 | tee -a "$LOG"
	log
fi

# Load latest downloaded tv show
if [[ ! -f "$CACHE" ]]; then
	LATEST="$(ssh "$SERVER" "find \"$SOURCE\" -type f -printf '%T@ %P\\n' | sort -n | egrep -i \"^[^ ]+ ($TVSHOWS)/.+$EXTENSIONS$\" | tail -1 | cut -f2- -d' '")"
	echo -n "$LATEST" > "$CACHE"
	log 'First run, nothing will be downloaded.'
	show 'Latest tv show:' "$LATEST"
	exit
fi
LATEST="$(cat "$CACHE")"
show 'Latest downloaded tv show:' "$LATEST"

# Downloads any new tv shows
log
show 'Downloading new tv shows...'
ssh "$SERVER" "find \"$SOURCE\" -type f -newer \"$SOURCE/$LATEST\" -printf '%P\\n' | egrep \"^($TVSHOWS)/.+$EXTENSIONS$\"" \
	| rsync -hrtv -e ssh --files-from=- --stats --progress "$SERVER:$SOURCE/" "$DESTINATION/" 2>&1 | tee -a "$LOG"

# Save new latest downloaded tv show if any
LATEST="$(find "$DESTINATION" -type f -printf '%T@ %P\n' | sort -n | tail -1 | cut -f2- -d' ')"
if [[ -n "$LATEST" ]]; then
	echo -n "$LATEST" > "$CACHE"
	log
	show 'New latest downloaded tv show:' "$LATEST"
fi

# Set permissions of downloaded tv shows
log
show 'Setting permissions of downloaded tv shows...'
sudo find "$DESTINATION" -exec synoacltool -enforce-inherit "{}" \;

# Trigger Medusa post-processing
log
show 'Triggering Medusa post-processing...'
ENCODED_PATH="$(python -c "import urllib;print urllib.quote(raw_input())" <<< "$MEDUSA_DOWNLOADS")"
URL="http://$MEDUSA_HOST:$MEDUSA_PORT/api/v1/$MEDUSA_TOKEN/?cmd=postprocess&type=manual&path=$ENCODED_PATH&process_method=move&force_replace=0&is_priority=0&delete_files=1&return_data=1"
RESPONSE="$(curl -fSs "$URL")"
[[ $? -ne 0 ]] && throw 'Medusa post-processing failed.'
python -c "import json;print json.loads(raw_input())['data']" <<< "$RESPONSE" 2>&1 | tee -a "$LOG"
