#!/bin/sh

log() {
	local messages="$@"
	[ -n "$LOG" ] && echo "$messages" | tee -a "$LOG" || echo "$messages"
}

show() {
	local title="$1" && shift && local messages="$@"
	[ -n "$LOG" ] && echo -e "\e[35m$title\e[39m" "$messages" | tee -a "$LOG" || echo "$title" "$messages"
}

throw() {
	local message="$1"
	[ -n "$LOG" ] && echo -e "\e[31m$message\e[39m" | tee -a "$LOG" >&2 || echo "$message" >&2
	exit 1
}

MEDIAHOME="$(realpath "$0" | xargs dirname)/.."
MEDIAPATH="$MEDIAHOME/media/.env"
[ -f "$MEDIAPATH" ] && MEDIAUSER="$(grep '^PUID=' "$MEDIAPATH" | cut -d'=' -f2)" || MEDIAUSER=
[ -z "$MEDIAUSER" ] && throw 'Run ~/media/configure first'
LOG="$MEDIAHOME/.log/tvshows.log"
CACHE="$MEDIAHOME/.cache/tvshows"
EXTENSIONS='\.(mkv|avi|divx|xvid|mov|wmv|mp4|mpg|mpeg|vob|iso|m4v|ts)'
DEBUGTVSHOWS=10

alias mediado="sudo -u '#$MEDIAUSER'"

mediado mkdir -p "$MEDIAHOME/.log"
mediado touch "$LOG"
echo -e "*** $(date) Start ***\n" >> "$LOG"

end() {
	echo -e "\n*** $(date) End ***\n" >> "$LOG"
}
trap end EXIT

# Load & check tv shows configuration
[ -f "$MEDIAHOME/.tvshows" ] || mediado cp "$MEDIAHOME/media/.tvshows.template" "$MEDIAHOME/.tvshows"
. "$MEDIAHOME/.tvshows"
if [ -z "$SERVER" ] || [ -z "$SOURCE" ] || [ -z "$DESTINATION" ] || [ -z "$TVSHOWS" ]; then
	throw '~/.tvshows is not properly configured'
fi
mediado ssh -o PasswordAuthentication=no "$SERVER" 'true'
[ $? -eq 0 ] || throw "$SERVER: password is required"
mediado ssh "$SERVER" "[ -d \"$SOURCE\" ]" || throw "$SERVER:$SOURCE: source path does not exist"
[ -d "$DESTINATION" ] || throw "$DESTINATION: destination path does not exist"
if [ -z "$MEDUSA_HOST" ] || [ -z "$MEDUSA_PORT" ] || [ -z "$MEDUSA_TOKEN" ] || [ -z "$MEDUSA_DOWNLOADS" ]; then
	throw '~/.tvshows is not properly configured (medusa)'
fi

# Display latest available tv shows
if [ $DEBUGTVSHOWS -gt 0 ]; then
	show 'Latest available tv shows:'
	mediado ssh "$SERVER" "find \"$SOURCE\" -type f -printf '%T+ %P\\n' | sort -n | egrep -i \"^[^ ]+ ($TVSHOWS)/.+$EXTENSIONS$\" | tail -$DEBUGTVSHOWS" 2>&1 | tee -a "$LOG"
	log
fi

# Load latest downloaded tv show
if [ ! -f "$CACHE" ]; then
	LATEST="$(mediado ssh "$SERVER" "find \"$SOURCE\" -type f -printf '%T@ %P\\n' | sort -n | egrep -i \"^[^ ]+ ($TVSHOWS)/.+$EXTENSIONS$\" | tail -1 | cut -f2- -d' '")"
	mediado echo -n "$LATEST" > "$CACHE"
	log 'First run, nothing will be downloaded'
	show 'Latest tv show:' "$LATEST"
	exit
fi
LATEST="$(cat "$CACHE")"
show 'Latest downloaded tv show:' "$LATEST"

# Downloads any new tv shows
log
show 'Downloading new tv shows...'
mediado ssh "$SERVER" "find \"$SOURCE\" -type f -newer \"$SOURCE/$LATEST\" -printf '%P\\n' | egrep \"^($TVSHOWS)/.+$EXTENSIONS$\" | sort" \
	| mediado rsync -hrtv -e ssh --files-from=- --stats --progress "$SERVER:$SOURCE/" "$DESTINATION/" 2>&1 | tee -a "$LOG"

# Display latest downloaded tv shows
if [ $DEBUGTVSHOWS -gt 0 ]; then
	log
	show 'Latest downloaded tv shows:'
	find "$DESTINATION" -type f -printf '%T@ %P\n' | sort -n | tail -$DEBUGTVSHOWS | cut -f2- -d' ' | tee -a "$LOG"
fi

# Save new latest downloaded tv show if any
LATEST="$(find "$DESTINATION" -type f -printf '%T@ %P\n' | sort -n | tail -1 | cut -f2- -d' ')"
if [ -n "$LATEST" ]; then
	mediado echo -n "$LATEST" > "$CACHE"
	log
	show 'New latest downloaded tv show:' "$LATEST"
fi

# Set permissions of downloaded tv shows
log
show 'Setting permissions of downloaded tv shows...'
sudo true || throw 'Permission denied'
sudo find "$DESTINATION" -exec synoacltool -enforce-inherit "{}" \;

# Trigger Medusa post-processing
log
show 'Triggering Medusa post-processing...'
ENCODED_PATH="$(python -c "import urllib;print urllib.quote(raw_input())" <<< "$MEDUSA_DOWNLOADS")"
URL="http://$MEDUSA_HOST:$MEDUSA_PORT/api/v1/$MEDUSA_TOKEN/?cmd=postprocess&type=manual&path=$ENCODED_PATH&process_method=move&force_replace=0&is_priority=0&delete_files=1&return_data=1"
RESPONSE="$(curl -fSs "$URL")"
[ $? -eq 0 ] || throw 'medusa post-processing failed'
python -c "import json;print json.loads(raw_input())['data']" <<< "$RESPONSE" 2>&1 | tee -a "$LOG"
